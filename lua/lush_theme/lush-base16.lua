local colors = require("lush_theme.colors")

local theme = require("lush")(function(injected_functions)
	local sym = injected_functions.sym

	return {
		-- core
		Normal({ bg = "none" }),
		NormalNC({ bg = "none" }),
		NormalFloat({ bg = colors.black }),
		Comment({ fg = colors.black.lighten(33), gui = "italic" }),
		FloatBorder({ fg = NormalFloat.bg.lighten(45), bg = colors.black }),
		FloatSel({ bg = NormalFloat.bg.lighten(20), fg = "none" }),
		CursorLine({ bg = colors.black.lighten(8) }),
		CursorColumn({ CursorLine }),
		Cursor({ fg = colors.white, gui = "reverse" }),
		Directory({ fg = colors.white }),
		DiffAdd({ fg = colors.green.lighten(25), bg = colors.green.darken(75) }),
		diffAdded({ fg = colors.green }),
		DiffChange({ fg = colors.blue.lighten(25), bg = colors.blue.darken(75) }),
		diffChanged({ fg = colors.blue }),
		DiffDelete({ fg = colors.red.lighten(25), bg = colors.red.darken(75) }),
		diffDelete({ fg = colors.red }),
		diffRemoved({ fg = colors.red }),
		DiffText({ fg = colors.blue.lighten(50), bg = DiffChange.bg, gui = "bold" }),
		EndOfBuffer({ Normal }),
		ErrorMsg({ fg = colors.red }),
		Folded({}),
		IncSearch({ fg = colors.black, bg = colors.yellow, gui = "bold" }),
		Search({ bg = colors.black.lighten(10), gui = "underline" }),
		Substitute({ bg = colors.orange, fg = colors.black }),
		LineNr({ fg = colors.black.lighten(30), bg = colors.black.lighten(6) }),
		ColorColumn({ fg = colors.black.lighten(10) }),
		VertSplit({ bg = "none", fg = colors.black.lighten(20) }),
		SignColumn({ LineNr }),
		FoldColumn({ SignColumn, fg = SignColumn.fg.lighten(25) }),
		CursorLineNr({ fg = colors.orange, bg = LineNr.bg, gui = "bold" }),
		MatchParen({ bg = CursorLine.bg.lighten(12) }),
		MoreMsg({ fg = colors.green, gui = "bold,italic" }),
		NonText({ fg = colors.black.lighten(15) }),
		Pmenu({ fg = "none", bg = colors.black.lighten(10) }),
		PmenuSel({ bg = Pmenu.bg.lighten(15) }),
		PmenuSbar({ bg = Pmenu.bg.darken(30) }),
		PmenuThumb({ bg = Pmenu.bg.lighten(70) }),
		DocMenu({ bg = Pmenu.bg }),
		Question({ fg = colors.green, gui = "bold,italic" }),
		QuickFixLine({ bg = colors.black.lighten(30) }),
		SpecialKey({ fg = colors.orange }),
		SpellBad({ sp = colors.red, gui = "undercurl" }),
		SpellCap({ sp = colors.blue, gui = "undercurl" }),
		SpellLocal({ sp = colors.cyan, gui = "undercurl" }),
		SpellRare({ sp = colors.purple, gui = "undercurl" }),
		StatusLine({ bg = colors.black.lighten(10) }),
		StatusLineNC({ bg = colors.black.lighten(10) }),
		Title({ fg = colors.blue }),
		Visual({ bg = colors.purple.darken(65).desaturate(55) }),
		WarningMsg({ fg = colors.yellow }),
		Whitespace({ fg = colors.red, bg = colors.red }),
		WinSeparator({ fg = VertSplit.fg, bg = VertSplit.bg }),
		WildMenu({ Pmenu }),
		Yank({ bg = colors.yellow, fg = colors.black }),
		Constant({ fg = colors.red, gui = "bold" }),
		String({ fg = colors.green }),
		Character({ fg = colors.red }),
		Number({ fg = colors.orange }),
		Boolean({ fg = colors.orange }),
		Float({ fg = colors.orange }),
		Identifier({ fg = colors.purple }),
		Function({ fg = colors.blue }),
		Statement({ fg = colors.purple, gui = "italic" }),
		Keyword({ Statement }),
		Operator({ fg = colors.purple }),
		Repeat({ fg = colors.yellow, gui = "italic" }),
		Exception({ fg = colors.red, gui = "italic" }),
		PreProc({ fg = colors.blue, gui = "italic" }),
		Type({ fg = colors.yellow }),
		Special({ fg = colors.orange }),
		Underlined({ fg = "none", gui = "underline" }),
		Ignore({ Comment }),
		Error({ fg = colors.red, gui = "bold" }),
		Todo({ fg = colors.black, bg = colors.cyan, gui = "bold" }),
		ConstBuiltin({ fg = colors.red.darken(5), gui = "italic,bold" }),
		ConstMacro({ Constant }),
		Field({ fg = colors.red }),
		Property({ Field }),
		FuncBuiltin({ fg = colors.cyan, gui = "italic" }),
		Method({ Function }),
		Include({}),
		Keyword({ Keyword }),
		KeywordFunction({ Keyword, gui = "none" }),
		KeywordReturn({ Keyword, gui = "italic" }),
		Label({ fg = colors.yellow }),
		None({ fg = colors.white }),
		Variable({ fg = colors.white }),
		Parameter({ fg = colors.orange, gui = "italic" }),
		VariableBuiltin({ fg = colors.yellow, gui = "italic" }),
		Strong({ gui = "bold" }),
		Emphasis({ Strong }),
		Underline({ gui = "underline" }),
		Strike({ gui = "strikethrough" }),
		URI({ gui = "none" }),
		TextReference({ fg = colors.red }),
		Warning({ WarningMsg }),
		Danger({ Error }),
		TypeBuiltin({ Type, gui = "italic" }),
		TypeDefinition({ Type }),
		Constructor({ Type }),
		Delimiter({ Operator }),
		LspReferenceText({}),
		LspReferenceWrite({ CursorLine }),
		LspReferenceRead({ CursorLine }),
		DiagnosticError({ fg = colors.red }),
		DiagnosticWarn({ fg = colors.yellow }),
		DiagnosticInfo({ fg = colors.blue }),
		DiagnosticHint({ fg = colors.white }),
		DiagnosticVirtualTextError({ fg = DiagnosticError.fg, bg = DiagnosticError.fg.darken(70), gui = "italic" }),
		DiagnosticVirtualTextWarn({ fg = DiagnosticWarn.fg, bg = DiagnosticWarn.fg.darken(70), gui = "italic" }),
		DiagnosticVirtualTextInfo({ fg = DiagnosticInfo.fg, bg = DiagnosticInfo.fg.darken(70), gui = "italic" }),
		DiagnosticVirtualTextHint({ fg = DiagnosticHint.fg, bg = DiagnosticHint.fg.darken(70), gui = "italic" }),
		DiagnosticUnderlineError({ sp = DiagnosticError.fg, gui = "undercurl" }),
		DiagnosticUnderlineWarn({ sp = DiagnosticWarn.fg, gui = "undercurl" }),
		DiagnosticUnderlineInfo({ sp = DiagnosticInfo.fg, gui = "undercurl" }),
		DiagnosticUnderlineHint({ sp = DiagnosticHint.fg, gui = "undercurl" }),
		DiagnosticSignError({ DiagnosticError, bg = LineNr.bg }),
		DiagnosticSignWarn({ DiagnosticWarn, bg = LineNr.bg }),
		DiagnosticSignInfo({ DiagnosticInfo, bg = LineNr.bg }),
		DiagnosticSignHint({ DiagnosticHint, bg = LineNr.bg }),
		WinBar({ fg = colors.white.darken(50), bg = colors.black.lighten(10) }),
		WinBarNC({ bg = WinBar.bg }),
		TablineHead({ fg = colors.purple, bg = colors.black.lighten(15) }),
		TabLine({ fg = colors.white, bg = colors.black.lighten(15) }),
		TablineFill({ fg = colors.black.lighten(15), bg = colors.black }),
		TablineWin({ fg = colors.white.darken(25), bg = colors.black.lighten(15) }),
		TablineSel({ fg = colors.white, bg = colors.black.lighten(15) }),
		TablineSep({ fg = colors.black, bg = colors.black.lighten(15) }),
		TablineTail({ fg = colors.green, bg = colors.black.lighten(15) }),

		-- indent-blankline
		IblIndent({ fg = colors.white.darken(70) }),
		IblScope({ fg = colors.purple.darken(25).desaturate(50) }),

		-- barbar
		BufferModified({ fg = colors.red, bg = colors.black.lighten(15) }),
		BufferCurrent({ fg = colors.white, bg = colors.black.lighten(20) }),
		BufferCurrentIcon({ bg = BufferCurrent.bg }),
		BufferCurrentMod({ fg = colors.red, bg = BufferCurrent.bg, gui = "italic" }),
		BufferCurrentSign({ fg = colors.blue, bg = BufferCurrent.bg }),
		BufferCurrentTarget({ fg = colors.purple, bg = BufferCurrent.bg, gui = "bold" }),
		BufferVisible({ fg = BufferCurrent.fg.darken(35), bg = colors.black }),
		BufferVisibleMod({ BufferCurrentMod, bg = BufferVisible.bg }),
		BufferVisibleIcon({ bg = BufferVisible.bg }),
		BufferVisibleSign({ fg = colors.white.darken(50), bg = BufferVisible.bg }),
		BufferVisibleTarget({ fg = colors.purple, bg = BufferVisible.bg, gui = "bold" }),
		BufferInactive({ fg = BufferVisible.fg.darken(50), bg = colors.black }),
		BufferInactiveMod({ BufferCurrentMod, bg = BufferInactive.bg }),
		BufferInactiveIcon({ bg = BufferInactive.bg }),
		BufferInactiveSign({ fg = BufferInactive.fg, bg = BufferInactive.bg }),
		BufferInactiveTarget({ fg = colors.purple, bg = BufferInactive.bg, gui = "bold" }),
		BufferTabpageFill({ bg = colors.black, fg = colors.white.darken(50) }),
		BufferBg({ bg = colors.black }),

		-- blink
		BlinkCmpGhostText({ fg = Comment.fg.darken(10), gui = "none" }),
		BlinkCmpAbbrMatch({ fg = colors.orange, gui = "bold" }),
		-- BlinkCmpAbbrMatchFuzzy { fg = BlinkCmpItemAbbrMatch.fg.desaturate(50) },
		BlinkCmpAbbrDefault({ fg = colors.white.darken(10) }),
		BlinkCmpMenu({ fg = colors.whiter, bg = "none" }),
		BlinkCmpBorder({ FloatBorder, bg = "none" }),
		BlinkCmpMenuBorder({ BlinkCmpBorder }),
		BlinkCmpDocSeparator({ BlinkCmpBorder }),
		BlinkCmpDoc({ BlinkCmpMenu }),
		BlinkCmpDocBorder({ BlinkCmpBorder }),
		BlinkCmpSignatureHelp({ BlinkCmpMenu }),
		BlinkCmpSignatureHelpBorder({ BlinkCmpBorder }),
		BlinkCmpKindField({ Field, gui = "reverse", bg = colors.black }),
		BlinkCmpKindProperty({ Property, gui = "reverse", bg = colors.black }),
		BlinkCmpKindEvent({ BlinkCmpMenu, bg = colors.black }),
		BlinkCmpKindDeprecated({ fg = colors.black.lighten(50), gui = "strikethrough,italic", bg = colors.black }),
		BlinkCmpKindText({ fg = colors.white, gui = "reverse", bg = colors.black }),
		BlinkCmpKindEnum({ Type, gui = "reverse", bg = colors.black }),
		BlinkCmpKindKeyword({ Keyword, gui = "reverse", bg = colors.black }),
		BlinkCmpKindConstant({ Constant, gui = "reverse", bg = colors.black }),
		BlinkCmpKindConstructor({ Constant, gui = "reverse", bg = colors.black }),
		BlinkCmpKindReference({ TextReference, gui = "reverse", bg = colors.black }),
		BlinkCmpKindFunction({ Function, gui = "reverse", bg = colors.black }),
		BlinkCmpKindStruct({ Type, gui = "reverse", bg = colors.black }),
		BlinkCmpKindClass({ Type, gui = "reverse", bg = colors.black }),
		BlinkCmpKindModule({ PreProc, gui = "reverse", bg = colors.black }),
		BlinkCmpKindOperator({ Operator, gui = "reverse", bg = colors.black }),
		BlinkCmpKindVariable({ Variable, gui = "reverse", bg = colors.black }),
		BlinkCmpKindFile({ BlinkCmpKindText, bg = colors.black }),
		BlinkCmpKindUnit({ BlinkCmpKindText, bg = colors.black }),
		BlinkCmpKindSnippet({ fg = colors.green, gui = "reverse", bg = colors.black }),
		BlinkCmpKindFolder({ fg = colors.cyan, gui = "reverse", bg = colors.black }),
		BlinkCmpKindMethod({ Method, gui = "reverse", bg = colors.black }),
		BlinkCmpKindValue({ Special, gui = "reverse", bg = colors.black }),
		BlinkCmpKindEnumMember({ Property, gui = "reverse", bg = colors.black }),
		BlinkCmpKindInterface({ Type, gui = "reverse", bg = colors.black }),
		BlinkCmpKindColor({ BlinkCmpKindText, bg = colors.black }),
		BlinkCmpKindTypeParameter({ BlinkCmpKindText, bg = colors.black }),
		BlinkCmpKindCopilot({ bg = colors.green, fg = colors.black }),
		BlinkCmpKindCodeium({ BlinkCmpKindCopilot }),
		BlinkCmpKindTabNine({ bg = colors.white, fg = colors.black }),
		BlinkCmpKindTreesitter({ bg = colors.green, fg = colors.black }),
		BlinkCmpSource({ fg = colors.white.darken(50), gui = "italic" }),

		-- telescope
		-- TelescopeNormal { fg = colors.white.darken(50), bg = colors.black },
		-- TelescopeBorder { fg = colors.black.lighten(33), bg = colors.black },
		-- TelescopeTitle { TelescopeBorder },
		-- TelescopePreviewNormal { bg = TelescopeNormal.bg },
		-- TelescopePreviewBorder { TelescopeBorder },
		-- TelescopePreviewTitle { TelescopeBorder },
		-- TelescopeMatching { BlinkCmpItemAbbrMatch },
		-- TelescopeResultsTitle { TelescopeMatching },
		-- TelescopeResultsBorder { TelescopeBorder },
		-- TelescopePromptNormal { fg = colors.white, bg = colors.black },
		-- TelescopePromptBorder { TelescopeBorder },
		-- TelescopePromptTitle { TelescopeNormal },
		-- TelescopePromptPrefix { fg = colors.orange, bg = TelescopePromptNormal.bg, gui = "bold" },
		-- TelescopeResultsLineNr { LineNr },
		-- TelescopeSelection { fg = colors.white, bg = FloatSel.bg },
		-- TelescopeSelectionCaret { fg = colors.yellow, bg = TelescopeNormal.bg },
		-- TelescopePreviewLine { CursorLine },
		-- TelescopeResultsFunction { BlinkCmpKindFunction },
		-- TelescopeResultsClass { BlinkCmpKindFunction },
		-- TelescopeResultsVariable { BlinkCmpKindVariable },
		-- TelescopeResultsConstant { BlinkCmpKindConstant },
		-- TelescopeResultsProperty { BlinkCmpKindProperty },
		-- TelescopeResultsStruct { Type },

		-- neotree
		NeoTreeNormal({ bg = "none" }),
		NeoTreeNormalNC({ bg = "none" }),
		TreeExpander({ fg = colors.orange }),
		TreeModified({ fg = BufferCurrentMod.fg }),
		NeoTreeDirectoryIcon({ Directory }),
		NeoTreeRootName({ fg = colors.purple, gui = "bold,italic" }),
		NeoTreeFileIcon({ fg = colors.orange }),
		NeoTreeGitUntracked({ fg = colors.yellow }),
		NeoTreeGitConflict({ fg = colors.red }),
		NeoTreeGitModified({ diffChanged }),
		NeoTreeGitRenamed({ fg = colors.yellow }),
		NeoTreeGitDeleted({ diffDelete }),
		NeoTreeGitAdded({ diffAdded }),

		-- rainbow-delimiters
		rainbowcol1({ fg = colors.red }),
		rainbowcol2({ fg = colors.orange }),
		rainbowcol3({ fg = colors.yellow }),
		rainbowcol4({ fg = colors.green }),
		rainbowcol5({ fg = colors.cyan }),
		rainbowcol6({ fg = colors.blue }),
		rainbowcol7({ fg = colors.purple }),

		-- gitsigns
		GitSignsAddLn({ DiffAdd }),
		GitSignsAddInline({ GitSignsAddLn, bg = GitSignsAddLn.bg.lighten(10), gui = "bold" }),
		-- GitSignsAddLnInline          { bg = colors.yellow },
		GitSignsDeleteLn({ DiffDelete }),
		GitSignsDeleteInline({ GitSignsDeleteLn, bg = GitSignsDeleteLn.bg.lighten(10), gui = "bold" }),
		-- GitSignsDeleteLnInline       { GitSignsDeleteLn },
		GitSignsChangeLn({ DiffChange }),
		GitSignsChangeInline({ GitSignsChangeLn, bg = GitSignsChangeLn.bg.lighten(10), gui = "bold" }),
		-- GitSignsChangeLnInline       { GitSignsChangeLn },
		GitSignsAdd({ diffAdded, bg = LineNr.bg }),
		GitSignsChange({ diffChanged, bg = LineNr.bg }),
		GitSignsChangeDelete({ diffChanged, bg = LineNr.bg }),
		GitSignsDelete({ diffDelete, bg = LineNr.bg }),

		-- illuminate
		IlluminatedWordText({ CursorLine, gui = "underline" }),
		sym("illuminatedWord")({ IlluminatedWordText }),

		-- flash
		FlashMatch({ fg = colors.white.darken(20) }),
		FlashCurrent({ fg = colors.purple, bg = colors.purple.darken(60), gui = "bold" }),
		FlashLabel({ fg = colors.blue, bg = colors.blue.darken(60), gui = "bold" }),

		-- treesitter-context
		TreesitterContext({ bg = WinBar.bg, gui = "" }),
		TreesitterContextBottom({ bg = WinBar.bg, gui = "none", guisp = colors.gray }),
		TreesitterContextLineNumberBottom({ fg = LineNr.fg, gui = "underline", guisp = colors.gray }),

		-- Semantic tokens
		sym("@lsp.type.class")({ Type }),
		sym("@lsp.type.comment")({ Comment }),
		sym("@lsp.type.decorator")({ PreProc }),
		sym("@lsp.type.enum")({ Type }),
		sym("@lsp.type.enumMember")({ Field }),
		sym("@lsp.type.event")({ Type }),
		sym("@lsp.type.function")({}),
		sym("@lsp.type.interface")({ Type }),
		sym("@lsp.type.keyword")({}),
		sym("@lsp.type.macro")({ Constant }),
		sym("@lsp.type.method")({ Function }),
		sym("@lsp.type.modifier")({ Type }),
		sym("@lsp.type.namespace")({ fg = colors.white.darken(20), gui = "italic" }),
		sym("@lsp.type.number")({ Number }),
		sym("@lsp.type.operator")({ Operator }),
		sym("@lsp.type.parameter")({ Parameter }),
		sym("@lsp.type.property")({ Field }),
		sym("@lsp.type.regexp")({ fg = colors.orange }),
		sym("@lsp.type.string")({}),
		sym("@lsp.type.struct")({ Type }),
		sym("@lsp.type.type")({ Type }),
		sym("@lsp.type.typeParameter")({ Type }),
		sym("@lsp.type.variable")({}),
		sym("@lsp.mod.abstract")({}),
		sym("@lsp.mod.async")({}),
		sym("@lsp.mod.declaration")({}),
		sym("@lsp.mod.defaultLibrary")({}),
		sym("@lsp.mod.definition")({}),
		sym("@lsp.mod.deprecated")({ Comment }),
		sym("@lsp.mod.documentation")({}),
		sym("@lsp.mod.modification")({}),
		sym("@lsp.mod.readonly")({}),
		sym("@lsp.mod.static")({}),
		sym("@lsp.typemod.type")({ Type }),
		sym("@lsp.typemod.method")({ sym("@lsp.type.method") }),
		sym("@lsp.typemod.definition")({}),
		sym("@lsp.typemod.variable.readonly")({}),
		sym("@lsp.typemod.type.defaultLibrary")({}),
		sym("@lsp.typemod.function.defaultLibrary")({ FuncBuiltin }),
		sym("@type.builtin")({ Type }),
		sym("@keyword.import")({ PreProc }),
		sym("@module")({ sym("@lsp.type.namespace") }),
		sym("@variable.member")({ Field }),
		sym("@variable.parameter")({ Parameter }),
		sym("@function.builtin")({ FuncBuiltin }),
		sym("@property")({ Field }),
		sym("@type.variable")({ Field }),
		sym("@constructor")({ Type }),
		sym("@lsp.type.property.lua")({}),
		sym("@diff.minus")({ diffRemoved }),
		sym("@diff.plus")({ diffAdded }),
		sym("@diff.delta")({ diffChanged }),
	}
end)

return theme
